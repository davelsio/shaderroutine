// kind=shader
uniform vec3 uColorTint;
uniform float uDirection;
uniform vec2 uResolution;
uniform float uPaletteShift;
uniform vec3 uPositionOffset;
uniform float uSpeed;
uniform float uSphereSize;
uniform float uTime;

const float PI = 3.14159265359;

void pR(inout vec2 p, float a) {
  p = cos(a)*p + sin(a)*vec2(p.y, -p.x);
}

float smax(float a, float b, float r) {
  vec2 u = max(vec2(r + a, r + b), vec2(0.0));
  return min(-r, max(a, b)) + length(u);
}

vec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {
  return a + b*cos(6.28318*(c*t+d));
}

vec3 spectrum(float n) {
  return pal(n + uPaletteShift, vec3(0.5,0.5,0.5), vec3(0.5,0.5,0.5), vec3(1.0,1.0,1.0), vec3(0.0,0.33,0.67));
}

vec4 inverseStereographic(vec3 p, out float k) {
  k = 2.0/(1.0+dot(p,p));
  return vec4(k*p, k-1.0);
}

float fTorus(vec4 p4) {
  float d1 = length(p4.xy) / length(p4.zw) - 1.0;
  float d2 = length(p4.zw) / length(p4.xy) - 1.0;
  float d = d1 < 0.0 ? -d1 : d2;
  d /= PI;
  return d;
}

float fixDistance(float d, float k) {
  float sn = sign(d);
  d = abs(d);
  d = d / k * 1.82;
  d += 1.0;
  d = pow(d, 0.5);
  d -= 1.0;
  d *= 5.0/3.0;
  d *= sn;
  return d;
}

float map(vec3 p, float time) {
  // Apply controls: reposition and scale the scene
  p = (p - uPositionOffset) / uSphereSize;
  float k;
  vec4 p4 = inverseStereographic(p, k);
  pR(p4.zy, time * -PI / 2.0 * uDirection);
  pR(p4.xw, time * -PI / 2.0 * uDirection);
  float d = fTorus(p4);
  d = abs(d);
  d -= 0.2;
  d = fixDistance(d, k);
  d = smax(d, length(p) - 1.85, 0.2);
  return d;
}

mat3 calcLookAtMatrix(vec3 ro, vec3 ta, vec3 up) {
  vec3 ww = normalize(ta - ro);
  vec3 uu = normalize(cross(ww, up));
  vec3 vv = normalize(cross(uu, ww));
  return mat3(uu, vv, ww);
}

vec4 main(vec2 pxCoords) {
  vec2 uv = pxCoords / uResolution;

  float time = mod(uTime * uSpeed / 2.0, 1.0);
  vec3 camPos = vec3(1.8, 5.5, -5.5) * 1.75;
  vec3 camTar = vec3(0.0, 0.0, 0.0);
  vec3 camUp = vec3(-1.0, 0.0, -1.5);
  mat3 camMat = calcLookAtMatrix(camPos, camTar, camUp);
  // sphere size
  float focalLength = 2.0;
  vec2 p = (uv * 2.0 - 1.0) * vec2(uResolution.x / uResolution.y, 1.0);

  vec3 rayDirection = normalize(camMat * vec3(p, focalLength));
  vec3 rayPosition = camPos;
  float rayLength = 0.0;
  float distance = 0.0;
  vec3 color = vec3(0.0);
  vec3 c;

  const float ITER = 82.0;
  const float FUDGE_FACTORR = 0.8;
  const float INTERSECTION_PRECISION = 0.001;
  const float MAX_DIST = 20.0;

  for (float i = 0.0; i < ITER; i++) {
    rayLength += max(INTERSECTION_PRECISION, abs(distance) * FUDGE_FACTORR);
    rayPosition = camPos + rayDirection * rayLength;
    distance = map(rayPosition, time);
    c = vec3(max(0.0, 0.01 - abs(distance)) * 0.5);
    c *= uColorTint;
    c += vec3(0.6, 0.25, 0.7) * FUDGE_FACTORR / 160.0;
    c *= smoothstep(20.0, 7.0, length(rayPosition));
    float rl = smoothstep(MAX_DIST, 0.1, rayLength);
    c *= rl;
    c *= spectrum(rl * 6.0 - 0.6);
    color += c;
    if (rayLength > MAX_DIST) {
            break;
    }
  }

  color = pow(color, vec3(1.0 / 1.8)) * 2.0;
  color = pow(color, vec3(2.0)) * 3.0;
  color = pow(color, vec3(1.0 / 2.2));

  float alpha = length(color);

  return vec4(color, alpha);
}
